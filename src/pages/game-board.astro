---
// src/pages/game-board.astro
export const prerender = false;
---

<style>
    .game-screen {
        width: 100%;
        min-height: 100vh;
        padding: 2rem;
        display: flex;
        flex-direction: column;
    }

    .game-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border-radius: 1.5rem;
        border: 2px solid rgba(139, 92, 246, 0.3);
        position: relative;
        overflow: hidden;
    }

    .game-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(139, 92, 246, 0.1), transparent);
        animation: headerShine 3s linear infinite;
    }

    @keyframes headerShine {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .current-team {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-shadow: 0 0 30px currentColor;
        animation: teamPulse 2s ease-in-out infinite;
    }

    @keyframes teamPulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .turn-timer {
        font-size: 4rem;
        font-weight: bold;
        font-family: 'Bebas Neue', cursive;
        letter-spacing: 3px;
        color: #8b5cf6;
        text-shadow: 0 0 20px rgba(139, 92, 246, 0.8);
        margin-bottom: 1rem;
    }

    .turn-timer.warning {
        color: #ef4444;
        animation: timerWarning 1s ease-in-out infinite;
    }

    @keyframes timerWarning {
        0%, 100% { 
            transform: scale(1);
            text-shadow: 0 0 20px rgba(239, 68, 68, 0.8);
        }
        50% { 
            transform: scale(1.1);
            text-shadow: 0 0 40px rgba(239, 68, 68, 1);
        }
    }

    .turn-instruction {
        color: #6b7280;
        font-size: 1.125rem;
    }

    .board-container {
        max-width: 1200px;
        margin: 0 auto 3rem;
        width: 100%;
    }

    .board-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
    }

    .category {
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 1rem;
        overflow: hidden;
        transition: all 0.3s;
    }

    .category:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(139, 92, 246, 0.3);
    }

    .category-title {
        background: linear-gradient(135deg, #8b5cf6, #ec4899);
        padding: 1.25rem;
        font-weight: bold;
        font-size: 1.125rem;
        text-align: center;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .questions {
        padding: 0.5rem;
    }

    .question-btn {
        width: 100%;
        padding: 2rem;
        margin-bottom: 0.5rem;
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 0.75rem;
        color: white;
        font-size: 2rem;
        font-weight: bold;
        font-family: 'Bebas Neue', cursive;
        cursor: pointer;
        transition: all 0.3s;
        position: relative;
        overflow: hidden;
    }

    .question-btn::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: radial-gradient(circle, rgba(139, 92, 246, 0.6), transparent);
        transition: all 0.5s;
        transform: translate(-50%, -50%);
    }

    .question-btn:hover:not(:disabled)::before {
        width: 300px;
        height: 300px;
    }

    .question-btn:hover:not(:disabled) {
        border-color: #8b5cf6;
        transform: scale(1.05);
        box-shadow: 0 10px 30px rgba(139, 92, 246, 0.4);
    }

    .question-btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
        background: rgba(255, 255, 255, 0.02);
    }

    .question-btn.answered {
        background: rgba(34, 197, 94, 0.2);
        border-color: #22c55e;
    }

    .question-btn.current {
        animation: currentQuestion 1s ease-in-out infinite;
        border-color: #fbbf24;
        background: rgba(251, 191, 36, 0.1);
    }

    @keyframes currentQuestion {
        0%, 100% { 
            transform: scale(1);
            box-shadow: 0 0 20px rgba(251, 191, 36, 0.5);
        }
        50% { 
            transform: scale(1.05);
            box-shadow: 0 0 40px rgba(251, 191, 36, 0.8);
        }
    }

    /* Question Modal */
    .modal {
        display: none;
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.95);
        backdrop-filter: blur(10px);
        z-index: 1000;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .modal.active {
        display: flex;
        animation: modalFadeIn 0.3s ease-out;
    }

    @keyframes modalFadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    .modal-content {
        background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(236, 72, 153, 0.1));
        backdrop-filter: blur(20px);
        border: 2px solid #8b5cf6;
        border-radius: 2rem;
        padding: 3rem;
        max-width: 900px;
        width: 100%;
        box-shadow: 0 0 100px rgba(139, 92, 246, 0.5);
        animation: modalEnter 0.5s ease-out;
        max-height: 90vh;
        overflow-y: auto;
    }

    @keyframes modalEnter {
        from {
            opacity: 0;
            transform: scale(0.8) rotateX(20deg);
        }
        to {
            opacity: 1;
            transform: scale(1) rotateX(0);
        }
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }

    .question-category {
        font-size: 1.5rem;
        font-weight: bold;
        color: #a78bfa;
    }

    .question-points {
        font-size: 2rem;
        font-weight: bold;
        color: #fbbf24;
        text-shadow: 0 0 20px rgba(251, 191, 36, 0.8);
    }

    .question-text {
        font-size: 2rem;
        line-height: 1.6;
        margin-bottom: 2rem;
        text-align: center;
        animation: questionAppear 0.5s ease-out;
    }

    @keyframes questionAppear {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .answer-section {
        margin-top: 2rem;
    }

    .answer-input {
        width: 100%;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 1rem;
        color: white;
        font-size: 1.25rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s;
        outline: none;
    }

    .answer-input:focus {
        border-color: #8b5cf6;
        background: rgba(139, 92, 246, 0.1);
        box-shadow: 0 0 30px rgba(139, 92, 246, 0.4);
    }

    .submit-answer-btn {
        width: 100%;
        padding: 1.5rem;
        background: linear-gradient(135deg, #22c55e, #16a34a);
        border: none;
        border-radius: 1rem;
        color: white;
        font-size: 1.25rem;
        font-weight: bold;
        cursor: pointer;
        text-transform: uppercase;
        letter-spacing: 2px;
        transition: all 0.3s;
        position: relative;
        overflow: hidden;
    }

    .submit-answer-btn::before {
        content: '';
        position: absolute;
        top: 50%;
        left: -100%;
        width: 100%;
        height: 200%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transform: translateY(-50%) rotate(45deg);
        transition: left 0.5s;
    }

    .submit-answer-btn:hover::before {
        left: 100%;
    }

    .submit-answer-btn:hover {
        transform: scale(1.02);
        box-shadow: 0 20px 40px rgba(34, 197, 94, 0.4);
    }

    .submit-answer-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .waiting-message {
        text-align: center;
        font-size: 1.25rem;
        color: #6b7280;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 1rem;
    }

    .suggestions-container {
        margin-top: 2rem;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 1rem;
        max-height: 300px;
        overflow-y: auto;
    }

    .suggestions-title {
        font-weight: bold;
        margin-bottom: 1rem;
        color: #93c5fd;
    }

    .suggestion {
        padding: 1rem;
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.3);
        border-radius: 0.75rem;
        margin-bottom: 0.75rem;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .suggestion:hover {
        background: rgba(59, 130, 246, 0.2);
        border-color: #3b82f6;
        transform: translateX(5px);
    }

    .suggestion.selected {
        background: rgba(34, 197, 94, 0.2);
        border-color: #22c55e;
    }

    .suggestion-text {
        flex: 1;
    }

    .suggestion-author {
        font-size: 0.875rem;
        color: #93c5fd;
    }

    /* Team Chat */
    .team-chat {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 400px;
        height: 500px;
        background: rgba(0, 0, 0, 0.95);
        backdrop-filter: blur(10px);
        border: 2px solid #8b5cf6;
        border-radius: 1.5rem;
        display: flex;
        flex-direction: column;
        box-shadow: 0 0 50px rgba(139, 92, 246, 0.4);
        z-index: 100;
        transition: all 0.3s;
    }

    .team-chat.minimized {
        height: 60px;
    }

    .chat-header {
        padding: 1.25rem;
        background: rgba(139, 92, 246, 0.2);
        border-bottom: 1px solid rgba(139, 92, 246, 0.5);
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 1.5rem 1.5rem 0 0;
    }

    .minimize-btn {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 1.25rem;
        transition: all 0.3s;
    }

    .minimize-btn:hover {
        transform: scale(1.2);
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .team-chat.minimized .chat-messages,
    .team-chat.minimized .chat-input-container {
        display: none;
    }

    .message {
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.75rem;
        animation: messageSlide 0.3s ease-out;
    }

    @keyframes messageSlide {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .message.system {
        background: rgba(139, 92, 246, 0.2);
        border: 1px solid rgba(139, 92, 246, 0.5);
        text-align: center;
        font-style: italic;
    }

    .message.suggestion {
        background: rgba(59, 130, 246, 0.2);
        border: 1px solid rgba(59, 130, 246, 0.5);
    }

    .message-author {
        font-weight: bold;
        color: #8b5cf6;
        margin-bottom: 0.25rem;
    }

    .chat-input-container {
        display: flex;
        gap: 0.75rem;
        padding: 1.25rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .chat-input {
        flex: 1;
        padding: 0.75rem 1rem;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 0.75rem;
        color: white;
        outline: none;
    }

    .chat-input:focus {
        border-color: #8b5cf6;
        background: rgba(139, 92, 246, 0.1);
    }

    .send-btn {
        padding: 0.75rem 1.5rem;
        background: #8b5cf6;
        border: none;
        border-radius: 0.75rem;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
    }

    .send-btn:hover {
        background: #7c3aed;
        transform: scale(1.05);
    }

    .suggest-btn {
        padding: 0.75rem 1.5rem;
        background: #3b82f6;
        border: none;
        border-radius: 0.75rem;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
    }

    .suggest-btn:hover {
        background: #2563eb;
        transform: scale(1.05);
    }

    /* Scoreboard */
    .scoreboard {
        position: fixed;
        left: 2rem;
        top: 2rem;
        width: 320px;
        background: rgba(0, 0, 0, 0.95);
        backdrop-filter: blur(10px);
        border: 2px solid rgba(255, 215, 0, 0.3);
        border-radius: 1.5rem;
        padding: 2rem;
        box-shadow: 0 0 50px rgba(255, 215, 0, 0.2);
    }

    .scoreboard-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #fbbf24;
        margin-bottom: 1.5rem;
        text-align: center;
        text-shadow: 0 0 20px rgba(251, 191, 36, 0.8);
    }

    .team-scores {
        margin-bottom: 2rem;
    }

    .team-score-item {
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.75rem;
        margin-bottom: 0.75rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.3s;
    }

    .team-score-item.current {
        background: rgba(139, 92, 246, 0.2);
        border: 2px solid #8b5cf6;
        transform: scale(1.05);
        animation: currentTeamPulse 2s ease-in-out infinite;
    }

    @keyframes currentTeamPulse {
        0%, 100% { box-shadow: 0 0 20px rgba(139, 92, 246, 0.5); }
        50% { box-shadow: 0 0 40px rgba(139, 92, 246, 0.8); }
    }

    .team-score-name {
        font-weight: bold;
    }

    .team-score-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .individual-leaderboard {
        padding-top: 1.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .leaderboard-subtitle {
        font-size: 1.125rem;
        color: #a78bfa;
        margin-bottom: 1rem;
    }

    .player-score-item {
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
    }

    .player-score-item:first-child {
        background: rgba(255, 215, 0, 0.1);
        border: 1px solid rgba(255, 215, 0, 0.3);
    }

    .player-rank {
        font-weight: bold;
        color: #fbbf24;
        margin-right: 0.5rem;
    }

    @media (max-width: 1024px) {
        .scoreboard, .team-chat {
            display: none;
        }
    }

    @media (max-width: 768px) {
        .board-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .question-btn {
            padding: 1.5rem;
            font-size: 1.5rem;
        }
        
        .modal-content {
            padding: 2rem;
        }
        
        .question-text {
            font-size: 1.5rem;
        }
    }
</style>

<div class="game-screen screen active">
    <div class="game-header">
        <h2 class="current-team" id="currentTeamDisplay">Team Name's Turn</h2>
        <div class="turn-timer" id="turnTimer">35</div>
        <p class="turn-instruction" id="turnInstruction">Select a question from the board</p>
    </div>

    <div class="board-container">
        <div class="board-grid" id="boardGrid">
            <!-- Categories and questions will be dynamically added -->
        </div>
    </div>
</div>

<!-- Question Modal -->
<div class="modal" id="questionModal">
    <div class="modal-content">
        <div class="question-header">
            <span class="question-category" id="modalCategory">Category</span>
            <span class="question-points" id="modalPoints">$100</span>
        </div>
        
        <p class="question-text" id="modalQuestion">Question will appear here</p>
        
        <div class="answer-section" id="answerSection">
            <!-- Answer input or waiting message -->
        </div>
        
        <div class="suggestions-container" id="suggestionsContainer" style="display: none;">
            <h4 class="suggestions-title">Team Suggestions:</h4>
            <div id="suggestionsList">
                <!-- Suggestions listed here -->
            </div>
        </div>
    </div>
</div>

<!-- Team Chat -->
<div class="team-chat" id="teamChat">
    <div class="chat-header">
        <span>Team Chat - <span id="chatTeamName">Team</span></span>
        <button class="minimize-btn" id="minimizeChat">−</button>
    </div>
    <div class="chat-messages" id="chatMessages">
        <!-- Messages appear here -->
    </div>
    <div class="chat-input-container">
        <input type="text" 
               class="chat-input" 
               id="chatInput" 
               placeholder="Type your message..."
               maxlength="200">
        <button class="send-btn" id="sendBtn">Send</button>
        <button class="suggest-btn" id="suggestBtn" style="display: none;">Suggest</button>
    </div>
</div>

<!-- Scoreboard -->
<div class="scoreboard" id="scoreboard">
    <h3 class="scoreboard-title">🏆 SCOREBOARD 🏆</h3>
    
    <div class="team-scores" id="teamScores">
        <!-- Team scores listed here -->
    </div>
    
    <div class="individual-leaderboard">
        <h4 class="leaderboard-subtitle">Top Players</h4>
        <div id="individualScores">
            <!-- Individual scores listed here -->
        </div>
    </div>
</div>

<script>
    // Get game state from parent
    const gameState = window.parent.gameState;
    const db = window.parent.firebase.database();
    
    // Categories
    const categories = {
        'Little WANUM': [
            { points: 100, q: "What does WANUM stand for?", a: "We Are Not Ur Mates" },
            { points: 200, q: "Who started the WANUM movement?", a: "Fanum" },
            { points: 300, q: "What year did WANUM begin?", a: "2020" },
            { points: 400, q: "Name 3 original WANUM members", a: "Various answers accepted" },
            { points: 500, q: "What's the WANUM hand sign?", a: "Demonstration required" },
            { points: 600, q: "Quote the WANUM anthem", a: "Various answers" },
            { points: 700, q: "Name all WANUM rules", a: "Complex answer" }
        ],
        'Fanum Tax': [
            { points: 100, q: "What is Fanum Tax?", a: "Taking food/portion" },
            { points: 200, q: "Who gets taxed most?", a: "Kai Cenat" },
            { points: 300, q: "Tax percentage?", a: "Whatever Fanum wants" },
            { points: 400, q: "Name 5 taxed foods", a: "Various" },
            { points: 500, q: "Most expensive tax?", a: "Specific incident" },
            { points: 600, q: "Tax immunity rules?", a: "Complex" },
            { points: 700, q: "Calculate $100 meal tax", a: "Math" }
        ],
        'WANUMMMMM': [
            { points: 100, q: "How many M's?", a: "5" },
            { points: 200, q: "When to shout?", a: "When hyped" },
            { points: 300, q: "Loudest WANUMMMMM?", a: "Debatable" },
            { points: 400, q: "Demo proper form", a: "Performance" },
            { points: 500, q: "Record duration?", a: "Time" },
            { points: 600, q: "Name variations", a: "Styles" },
            { points: 700, q: "Create remix", a: "Creative" }
        ],
        'WLTS': [
            { points: 100, q: "What's WLTS?", a: "We Love To See It" },
            { points: 200, q: "First use?", a: "Date/stream" },
            { points: 300, q: "3 WLTS moments", a: "Various" },
            { points: 400, q: "Opposite of WLTS?", a: "WHTSI" },
            { points: 500, q: "Biggest 2024 WLTS?", a: "Event" },
            { points: 600, q: "Create scenario", a: "Creative" },
            { points: 700, q: "WLTS philosophy", a: "Deep" }
        ],
        'Bronx Education': [
            { points: 100, q: "Fanum's borough?", a: "The Bronx" },
            { points: 200, q: "3 landmarks?", a: "Various" },
            { points: 300, q: "Bronx motto?", a: "Phrase" },
            { points: 400, q: "5 slang terms", a: "Terms" },
            { points: 500, q: "BX vs BK beef?", a: "Cultural" },
            { points: 600, q: "Borough ranking", a: "List" },
            { points: 700, q: "History lesson", a: "Historical" }
        ]
    };
    
    // State
    let teams = {};
    let players = {};
    let currentTeamIndex = 0;
    let turnTimeLeft = 35;
    let answeredQuestions = {};
    let turnTimer = null;
    let currentQuestion = null;
    let leaderboardInterval = null;
    let selectedSuggestion = null;
    
    // Initialize
    initializeGameBoard();
    setupGameListeners();
    setupRealtimeListeners();
    startLeaderboardUpdates();
    
    function initializeGameBoard() {
        const boardGrid = document.getElementById('boardGrid');
        const categoryList = Object.keys(categories).slice(0, 5);
        
        boardGrid.innerHTML = categoryList.map(catName => {
            const questions = categories[catName];
            
            return `
                <div class="category">
                    <div class="category-title">${catName}</div>
                    <div class="questions">
                        ${questions.map(q => `
                            <button class="question-btn" 
                                    data-category="${catName}" 
                                    data-points="${q.points}"
                                    onclick="selectQuestion('${catName}', ${q.points})">
                                $${q.points}
                            </button>
                        `).join('')}
                    </div>
                </div>
            `;
        }).join('');
    }
    
    function setupGameListeners() {
        // Chat
        document.getElementById('minimizeChat').addEventListener('click', toggleChat);
        document.getElementById('sendBtn').addEventListener('click', sendMessage);
        document.getElementById('suggestBtn').addEventListener('click', sendSuggestion);
        document.getElementById('chatInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                if (document.getElementById('suggestBtn').style.display !== 'none') {
                    sendSuggestion();
                } else {
                    sendMessage();
                }
            }
        });
    }
    
    function setupRealtimeListeners() {
        if (!gameState.gameId) return;
        
        const gameRef = db.ref(`games/${gameState.gameId}`);
        
        // Teams
        gameRef.child('teams').on('value', (snapshot) => {
            teams = snapshot.val() || {};
            updateScoreboard();
            updateTeamChat();
        });
        
        // Players
        gameRef.child('players').on('value', (snapshot) => {
            players = snapshot.val() || {};
            updateScoreboard();
        });
        
        // Current team turn
        gameRef.child('currentTeamIndex').on('value', (snapshot) => {
            currentTeamIndex = snapshot.val() || 0;
            updateCurrentTurn();
        });
        
        // Turn timer
        gameRef.child('turnTimeLeft').on('value', (snapshot) => {
            turnTimeLeft = snapshot.val() || 35;
            updateTimerDisplay();
        });
        
        // Answered questions
        gameRef.child('answeredQuestions').on('value', (snapshot) => {
            answeredQuestions = snapshot.val() || {};
            updateBoard();
        });
        
        // Current question
        gameRef.child('currentQuestion').on('value', (snapshot) => {
            currentQuestion = snapshot.val();
            if (currentQuestion) {
                showQuestionModal();
            } else {
                hideQuestionModal();
            }
        });
        
        // Chat messages
        gameRef.child('chat').limitToLast(50).on('child_added', (snapshot) => {
            const message = snapshot.val();
            displayChatMessage(message);
        });
        
        // Suggestions
        gameRef.child('currentSuggestions').on('value', (snapshot) => {
            const suggestions = snapshot.val() || {};
            updateSuggestions(suggestions);
        });
        
        // Skip turn (host)
        gameRef.child('skipTurn').on('value', (snapshot) => {
            if (snapshot.val()) {
                nextTurn();
            }
        });
    }
    
    function updateCurrentTurn() {
        const teamList = Object.values(teams);
        const currentTeam = teamList[currentTeamIndex];
        
        if (!currentTeam) return;
        
        document.getElementById('currentTeamDisplay').textContent = `${currentTeam.name}'s Turn`;
        document.getElementById('currentTeamDisplay').style.color = currentTeam.color;
        
        const isMyTurn = gameState.currentPlayer.teamId === currentTeam.id;
        document.getElementById('turnInstruction').textContent = 
            isMyTurn ? 'Select a question from the board' : `Waiting for ${currentTeam.name} to select...`;
        
        // Enable/disable question selection
        document.querySelectorAll('.question-btn:not(:disabled)').forEach(btn => {
            btn.style.pointerEvents = isMyTurn && !currentQuestion ? 'auto' : 'none';
            btn.style.opacity = isMyTurn && !currentQuestion ? '1' : '0.7';
        });
        
        // Update scoreboard
        updateScoreboard();
        
        // Start turn timer
        if (isMyTurn && !currentQuestion) {
            startTurnTimer();
        }
    }
    
    function startTurnTimer() {
        if (turnTimer) clearInterval(turnTimer);
        
        turnTimer = setInterval(async () => {
            if (turnTimeLeft > 0) {
                await db.ref(`games/${gameState.gameId}/turnTimeLeft`).set(turnTimeLeft - 1);
            } else {
                // Time's up - skip turn
                clearInterval(turnTimer);
                if (gameState.isHost) {
                    nextTurn();
                }
            }
        }, 1000);
    }
    
    function updateTimerDisplay() {
        const timerEl = document.getElementById('turnTimer');
        timerEl.textContent = turnTimeLeft;
        
        if (turnTimeLeft <= 10) {
            timerEl.classList.add('warning');
        } else {
            timerEl.classList.remove('warning');
        }
    }
    
    function updateBoard() {
        document.querySelectorAll('.question-btn').forEach(btn => {
            const category = btn.dataset.category;
            const points = btn.dataset.points;
            const key = `${category}-${points}`;
            
            if (answeredQuestions[key]) {
                btn.classList.add('answered');
                btn.disabled = true;
            }
            
            if (currentQuestion && currentQuestion.category === category && currentQuestion.points == points) {
                btn.classList.add('current');
            } else {
                btn.classList.remove('current');
            }
        });
    }
    
    window.selectQuestion = async function(category, points) {
        const teamList = Object.values(teams);
        const currentTeam = teamList[currentTeamIndex];
        
        if (!currentTeam || gameState.currentPlayer.teamId !== currentTeam.id || currentQuestion) return;
        
        const question = categories[category].find(q => q.points === points);
        if (!question) return;
        
        try {
            // Set current question
            await db.ref(`games/${gameState.gameId}/currentQuestion`).set({
                category: category,
                points: points,
                text: question.q,
                answer: question.a,
                teamId: currentTeam.id,
                timestamp: Date.now()
            });
            
            // Clear turn timer
            clearInterval(turnTimer);
            
        } catch (error) {
            console.error('Error selecting question:', error);
        }
    };
    
    function showQuestionModal() {
        if (!currentQuestion) return;
        
        const modal = document.getElementById('questionModal');
        const teamList = Object.values(teams);
        const currentTeam = teamList[currentTeamIndex];
        const isMyTeam = gameState.currentPlayer.teamId === currentTeam.id;
        
        document.getElementById('modalCategory').textContent = currentQuestion.category;
        document.getElementById('modalPoints').textContent = `$${currentQuestion.points}`;
        document.getElementById('modalQuestion').textContent = currentQuestion.text;
        
        // Setup answer section
        const answerSection = document.getElementById('answerSection');
        if (isMyTeam && gameState.currentPlayer.isLeader) {
            answerSection.innerHTML = `
                <input type="text" class="answer-input" id="answerInput" 
                       placeholder="Enter your answer..." autofocus>
                <button class="submit-answer-btn" id="submitAnswerBtn" onclick="submitAnswer()">
                    SUBMIT ANSWER
                </button>
            `;
            document.getElementById('answerInput').focus();
        } else if (isMyTeam) {
            answerSection.innerHTML = `
                <div class="waiting-message">
                    <p>💭 Use team chat to suggest answers to your leader!</p>
                    <p style="margin-top: 1rem; font-size: 1rem;">Your suggestions can earn you points!</p>
                </div>
            `;
            // Show suggest button
            document.getElementById('suggestBtn').style.display = 'block';
            document.getElementById('sendBtn').style.display = 'none';
        } else {
            answerSection.innerHTML = `
                <div class="waiting-message">
                    <p>⏳ Waiting for ${currentTeam.name} to answer...</p>
                </div>
            `;
        }
        
        // Clear suggestions
        document.getElementById('suggestionsList').innerHTML = '';
        selectedSuggestion = null;
        
        modal.classList.add('active');
        
        // Add system message to chat
        if (isMyTeam) {
            const chatMessages = document.getElementById('chatMessages');
            const systemMsg = document.createElement('div');
            systemMsg.className = 'message system';
            systemMsg.textContent = `Question selected: ${currentQuestion.category} for $${currentQuestion.points}`;
            chatMessages.appendChild(systemMsg);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }
    
    function hideQuestionModal() {
        document.getElementById('questionModal').classList.remove('active');
        document.getElementById('suggestBtn').style.display = 'none';
        document.getElementById('sendBtn').style.display = 'block';
    }
    
    window.submitAnswer = async function() {
        const answer = document.getElementById('answerInput').value.trim();
        if (!answer || !currentQuestion) return;
        
        try {
            // For now, host validates answers
            if (gameState.isHost || true) { // Auto-accept for testing
                // Award points
                const points = currentQuestion.points;
                const teamId = currentQuestion.teamId;
                
                // Update team score
                await db.ref(`games/${gameState.gameId}/teams/${teamId}/score`)
                    .transaction((current) => (current || 0) + points);
                
                // Update player score
                await db.ref(`games/${gameState.gameId}/players/${gameState.currentUserId}/score`)
                    .transaction((current) => (current || 0) + points);
                
                // If suggestion was used, award suggester
                if (selectedSuggestion) {
                    await db.ref(`games/${gameState.gameId}/players/${selectedSuggestion.playerId}/score`)
                        .transaction((current) => (current || 0) + Math.floor(points * 0.5));
                }
                
                // Mark question as answered
                const key = `${currentQuestion.category}-${currentQuestion.points}`;
                await db.ref(`games/${gameState.gameId}/answeredQuestions/${key}`).set(true);
                
                // Clear current question
                await db.ref(`games/${gameState.gameId}/currentQuestion`).remove();
                await db.ref(`games/${gameState.gameId}/currentSuggestions`).remove();
                
                // Send Discord update
                const team = teams[teamId];
                window.parent.sendDiscordNotification(
                    `✅ **${team.name}** answered correctly! +${points} points`
                );
                
                // Check if game should end
                const totalAnswered = Object.keys(answeredQuestions).length + 1;
                const totalQuestions = Object.keys(categories).slice(0, 5).reduce((sum, cat) => 
                    sum + categories[cat].length, 0
                );
                
                if (totalAnswered >= totalQuestions) {
                    // End game
                    await db.ref(`games/${gameState.gameId}/status`).set('finished');
                } else {
                    // Next turn
                    setTimeout(() => nextTurn(), 2000);
                }
            }
        } catch (error) {
            console.error('Error submitting answer:', error);
        }
    };
    
    async function nextTurn() {
        const teamList = Object.values(teams);
        const nextIndex = (currentTeamIndex + 1) % teamList.length;
        
        await db.ref(`games/${gameState.gameId}`).update({
            currentTeamIndex: nextIndex,
            turnTimeLeft: 35,
            currentQuestion: null,
            currentSuggestions: null
        });
    }
    
    function toggleChat() {
        const chat = document.getElementById('teamChat');
        const btn = document.getElementById('minimizeChat');
        
        if (chat.classList.contains('minimized')) {
            chat.classList.remove('minimized');
            btn.textContent = '−';
        } else {
            chat.classList.add('minimized');
            btn.textContent = '+';
        }
    }
    
    function updateTeamChat() {
        const team = teams[gameState.currentPlayer.teamId];
        if (team) {
            document.getElementById('chatTeamName').textContent = team.name;
        }
    }
    
    async function sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        if (!message) return;
        
        try {
            await db.ref(`games/${gameState.gameId}/chat`).push({
                message: message,
                playerId: gameState.currentUserId,
                playerName: gameState.currentPlayer.name,
                teamId: gameState.currentPlayer.teamId,
                type: 'message',
                timestamp: Date.now()
            });
            
            input.value = '';
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }
    
    async function sendSuggestion() {
        const input = document.getElementById('chatInput');
        const suggestion = input.value.trim();
        if (!suggestion || !currentQuestion) return;
        
        try {
            // Add to chat
            await db.ref(`games/${gameState.gameId}/chat`).push({
                message: suggestion,
                playerId: gameState.currentUserId,
                playerName: gameState.currentPlayer.name,
                teamId: gameState.currentPlayer.teamId,
                type: 'suggestion',
                timestamp: Date.now()
            });
            
            // Add to suggestions
            await db.ref(`games/${gameState.gameId}/currentSuggestions`).push({
                text: suggestion,
                playerId: gameState.currentUserId,
                playerName: gameState.currentPlayer.name,
                timestamp: Date.now()
            });
            
            input.value = '';
        } catch (error) {
            console.error('Error sending suggestion:', error);
        }
    }
    
    function displayChatMessage(message) {
        if (!message || message.teamId !== gameState.currentPlayer.teamId) return;
        
        const chatMessages = document.getElementById('chatMessages');
        const messageEl = document.createElement('div');
        messageEl.className = `message ${message.type === 'suggestion' ? 'suggestion' : ''}`;
        
        messageEl.innerHTML = `
            <div class="message-author">${message.playerName}${message.type === 'suggestion' ? ' (Suggestion)' : ''}</div>
            <div>${message.message}</div>
        `;
        
        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function updateSuggestions(suggestions) {
        if (!gameState.currentPlayer.isLeader || !currentQuestion) return;
        
        const container = document.getElementById('suggestionsContainer');
        const list = document.getElementById('suggestionsList');
        
        const suggestionsList = Object.entries(suggestions || {});
        
        if (suggestionsList.length > 0) {
            container.style.display = 'block';
            list.innerHTML = suggestionsList.map(([id, sugg]) => `
                <div class="suggestion ${selectedSuggestion?.id === id ? 'selected' : ''}" 
                     onclick="selectSuggestion('${id}', '${sugg.text.replace(/'/g, "\\'")}', '${sugg.playerId}')">
                    <span class="suggestion-text">${sugg.text}</span>
                    <span class="suggestion-author">- ${sugg.playerName}</span>
                </div>
            `).join('');
        } else {
            container.style.display = 'none';
        }
    }
    
    window.selectSuggestion = function(id, text, playerId) {
        selectedSuggestion = { id, text, playerId };
        document.getElementById('answerInput').value = text;
        
        // Update UI
        document.querySelectorAll('.suggestion').forEach(el => {
            el.classList.remove('selected');
        });
        event.target.closest('.suggestion').classList.add('selected');
    };
    
    function updateScoreboard() {
        // Team scores
        const teamScores = document.getElementById('teamScores');
        const teamList = Object.values(teams).sort((a, b) => b.score - a.score);
        
        teamScores.innerHTML = teamList.map((team, idx) => {
            const isCurrent = teamList[currentTeamIndex]?.id === team.id;
            
            return `
                <div class="team-score-item ${isCurrent ? 'current' : ''}">
                    <span class="team-score-name" style="color: ${team.color}">${team.name}</span>
                    <span class="team-score-value">${team.score || 0}</span>
                </div>
            `;
        }).join('');
        
        // Individual scores
        const individualScores = document.getElementById('individualScores');
        const playerList = Object.values(players)
            .sort((a, b) => (b.score || 0) - (a.score || 0))
            .slice(0, 5);
        
        individualScores.innerHTML = playerList.map((player, idx) => `
            <div class="player-score-item">
                <span>
                    <span class="player-rank">#${idx + 1}</span>
                    ${player.name}
                </span>
                <span>${player.score || 0}</span>
            </div>
        `).join('');
    }
    
    function startLeaderboardUpdates() {
        // Send Discord updates every 30 seconds
        leaderboardInterval = setInterval(async () => {
            if (gameState.isHost) {
                const teamList = Object.values(teams).sort((a, b) => b.score - a.score);
                
                const embed = {
                    title: "🏆 Live Leaderboard Update",
                    color: 0x8b5cf6,
                    fields: teamList.map((team, idx) => ({
                        name: `${idx + 1}. ${team.name}`,
                        value: `${team.score || 0} points`,
                        inline: true
                    })),
                    timestamp: new Date().toISOString(),
                    footer: {
                        text: "Fanum Trivia Championship",
                        icon_url: "https://res.cloudinary.com/dcyvxzhnl/image/upload/v1749096874/image_2025-06-05_001433624_qn0xue.png"
                    }
                };
                
                window.parent.sendDiscordNotification('', embed);
            }
        }, 30000);
    }
    
    // Cleanup
    window.addEventListener('beforeunload', () => {
        if (turnTimer) clearInterval(turnTimer);
        if (leaderboardInterval) clearInterval(leaderboardInterval);
    });
</script>
