---
// src/pages/waiting-room.astro
export const prerender = false;
---

<style>
    .waiting-room {
        width: 100%;
        min-height: 100vh;
        padding: 2rem;
        display: flex;
        flex-direction: column;
    }

    .waiting-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .room-title {
        font-family: 'Bebas Neue', cursive;
        font-size: 3rem;
        background: linear-gradient(45deg, #8b5cf6, #ec4899);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1rem;
        animation: titlePulse 3s ease-in-out infinite;
    }

    @keyframes titlePulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .room-subtitle {
        color: #6b7280;
        font-size: 1.125rem;
    }

    .room-layout {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 2rem;
        max-width: 1400px;
        margin: 0 auto;
        width: 100%;
    }

    .teams-area {
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 1.5rem;
        padding: 2rem;
    }

    .create-team-section {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: rgba(139, 92, 246, 0.1);
        border-radius: 1rem;
        border: 1px solid rgba(139, 92, 246, 0.3);
    }

    .team-name-input {
        flex: 1;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(139, 92, 246, 0.3);
        border-radius: 0.75rem;
        color: white;
        font-size: 1rem;
        outline: none;
        transition: all 0.3s;
    }

    .team-name-input:focus {
        border-color: #8b5cf6;
        background: rgba(139, 92, 246, 0.1);
        box-shadow: 0 0 20px rgba(139, 92, 246, 0.4);
    }

    .create-team-btn {
        padding: 1rem 2rem;
        background: linear-gradient(135deg, #8b5cf6, #ec4899);
        border: none;
        border-radius: 0.75rem;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
        white-space: nowrap;
        position: relative;
        overflow: hidden;
    }

    .create-team-btn::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: all 0.5s;
    }

    .create-team-btn:hover::before {
        width: 300px;
        height: 300px;
    }

    .create-team-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 10px 30px rgba(139, 92, 246, 0.4);
    }

    .teams-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .team-card {
        background: rgba(255, 255, 255, 0.05);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 1rem;
        padding: 1.5rem;
        transition: all 0.3s;
        position: relative;
        overflow: hidden;
    }

    .team-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--team-color);
    }

    .team-card:hover {
        transform: translateY(-5px);
        border-color: var(--team-color);
        box-shadow: 0 20px 40px rgba(139, 92, 246, 0.3);
    }

    .team-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .team-name {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .team-slots {
        font-size: 0.875rem;
        color: #a78bfa;
        padding: 0.25rem 0.75rem;
        background: rgba(139, 92, 246, 0.2);
        border-radius: 1rem;
    }

    .team-members {
        margin-bottom: 1rem;
        min-height: 200px;
    }

    .member {
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s;
        animation: memberSlide 0.3s ease-out;
    }

    @keyframes memberSlide {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .member.leader {
        background: rgba(251, 191, 36, 0.1);
        border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .member:hover {
        transform: translateX(5px);
        background: rgba(255, 255, 255, 0.08);
    }

    .crown {
        font-size: 1.25rem;
        filter: drop-shadow(0 0 10px rgba(251, 191, 36, 0.8));
        animation: crownFloat 2s ease-in-out infinite;
    }

    @keyframes crownFloat {
        0%, 100% { transform: translateY(0) rotate(-5deg); }
        50% { transform: translateY(-3px) rotate(5deg); }
    }

    .member-name {
        flex: 1;
        font-weight: 500;
    }

    .kick-btn {
        padding: 0.25rem 0.5rem;
        background: rgba(239, 68, 68, 0.2);
        border: 1px solid #ef4444;
        border-radius: 0.25rem;
        color: #ef4444;
        font-size: 0.75rem;
        cursor: pointer;
        opacity: 0;
        transition: all 0.3s;
    }

    .member:hover .kick-btn {
        opacity: 1;
    }

    .join-team-btn {
        width: 100%;
        padding: 0.75rem;
        background: linear-gradient(135deg, #10b981, #059669);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
    }

    .join-team-btn:hover {
        transform: scale(1.02);
        box-shadow: 0 10px 30px rgba(16, 185, 129, 0.4);
    }

    .join-team-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .players-panel {
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 1.5rem;
        padding: 2rem;
        height: fit-content;
        position: sticky;
        top: 2rem;
    }

    .panel-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        color: #a78bfa;
    }

    .player-list {
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 2rem;
    }

    .player-item {
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.75rem;
        margin-bottom: 0.75rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.3s;
    }

    .player-item.no-team {
        border: 2px solid rgba(239, 68, 68, 0.5);
        background: rgba(239, 68, 68, 0.1);
        animation: noTeamPulse 2s ease-in-out infinite;
    }

    @keyframes noTeamPulse {
        0%, 100% { border-color: rgba(239, 68, 68, 0.5); }
        50% { border-color: rgba(239, 68, 68, 0.8); }
    }

    .player-name {
        font-weight: 600;
    }

    .invite-btn {
        padding: 0.5rem 1rem;
        background: rgba(59, 130, 246, 0.2);
        border: 1px solid #3b82f6;
        border-radius: 0.5rem;
        color: #93c5fd;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s;
    }

    .invite-btn:hover {
        background: rgba(59, 130, 246, 0.3);
        transform: scale(1.05);
    }

    .stats-section {
        padding-top: 1.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
        font-size: 1.125rem;
    }

    .stat-label {
        color: #6b7280;
    }

    .stat-value {
        font-weight: bold;
        color: #8b5cf6;
    }

    .start-section {
        margin-top: 3rem;
        text-align: center;
        padding: 2rem;
        background: rgba(34, 197, 94, 0.1);
        border: 2px solid rgba(34, 197, 94, 0.3);
        border-radius: 1rem;
        animation: startAppear 0.5s ease-out;
    }

    @keyframes startAppear {
        from {
            opacity: 0;
            transform: scale(0.9);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .ready-text {
        font-size: 1.25rem;
        color: #86efac;
        margin-bottom: 1.5rem;
    }

    .start-game-btn {
        padding: 1.5rem 3rem;
        background: linear-gradient(135deg, #22c55e, #16a34a);
        border: none;
        border-radius: 1rem;
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        cursor: pointer;
        text-transform: uppercase;
        letter-spacing: 2px;
        transition: all 0.3s;
        animation: startBtnPulse 2s ease-in-out infinite;
        position: relative;
        overflow: hidden;
    }

    .start-game-btn::after {
        content: 'ðŸš€';
        position: absolute;
        font-size: 3rem;
        opacity: 0;
        top: 50%;
        left: -50px;
        transform: translateY(-50%);
        animation: rocketFly 3s ease-in-out infinite;
    }

    @keyframes rocketFly {
        0% {
            left: -50px;
            opacity: 0;
        }
        50% {
            opacity: 1;
        }
        100% {
            left: calc(100% + 50px);
            opacity: 0;
        }
    }

    @keyframes startBtnPulse {
        0%, 100% { 
            transform: scale(1);
            box-shadow: 0 0 30px rgba(34, 197, 94, 0.5);
        }
        50% { 
            transform: scale(1.05);
            box-shadow: 0 0 50px rgba(34, 197, 94, 0.8);
        }
    }

    .start-game-btn:hover {
        animation-play-state: paused;
        transform: scale(1.1);
        box-shadow: 0 0 60px rgba(34, 197, 94, 1);
    }

    @media (max-width: 1024px) {
        .room-layout {
            grid-template-columns: 1fr;
        }
        
        .players-panel {
            position: static;
            order: -1;
            margin-bottom: 2rem;
        }
    }

    @media (max-width: 768px) {
        .teams-grid {
            grid-template-columns: 1fr;
        }
        
        .create-team-section {
            flex-direction: column;
        }
    }
</style>

<div class="waiting-room screen active">
    <div class="waiting-header">
        <h1 class="room-title">TEAM FORMATION</h1>
        <p class="room-subtitle">Create or join a team â€¢ Max 5 players per team</p>
    </div>

    <div class="room-layout">
        <div class="teams-area">
            <div class="create-team-section">
                <input type="text" 
                       class="team-name-input" 
                       id="teamNameInput" 
                       placeholder="Enter team name..."
                       maxlength="20">
                <button class="create-team-btn" id="createTeamBtn">
                    Create Team
                </button>
            </div>

            <div class="teams-grid" id="teamsGrid">
                <!-- Teams will be dynamically added here -->
            </div>

            <div class="start-section" id="startSection" style="display: none;">
                <p class="ready-text">ðŸŽ® All systems ready! Let's begin!</p>
                <button class="start-game-btn" id="startGameBtn">
                    LAUNCH GAME
                </button>
            </div>
        </div>

        <div class="players-panel">
            <h3 class="panel-title">Players Without Teams</h3>
            <div class="player-list" id="noTeamPlayersList">
                <!-- Players without teams listed here -->
            </div>
            
            <div class="stats-section">
                <div class="stat-item">
                    <span class="stat-label">Total Players:</span>
                    <span class="stat-value" id="totalPlayers">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Teams:</span>
                    <span class="stat-value" id="totalTeams">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Game ID:</span>
                    <span class="stat-value" id="gameIdDisplay" style="font-size: 0.875rem;">-</span>
                </div>
            </div>
            
            <p style="font-size: 0.875rem; color: #6b7280; margin-top: 1rem; text-align: center;">
                Players without teams will be auto-assigned when game starts
            </p>
        </div>
    </div>
</div>

<script>
    // Get game state from parent
    const gameState = window.parent.gameState;
    const db = window.parent.firebase.database();
    
    // Team colors
    const teamColors = ['#ef4444', '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#06b6d4', '#84cc16'];
    
    // State
    let teams = {};
    let players = {};
    
    // Initialize
    setupWaitingRoomListeners();
    setupRealtimeListeners();
    
    function setupWaitingRoomListeners() {
        // Create team
        document.getElementById('createTeamBtn').addEventListener('click', createTeam);
        document.getElementById('teamNameInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') createTeam();
        });
        
        // Start game
        document.getElementById('startGameBtn').addEventListener('click', startGame);
        
        // Display game ID
        if (gameState.gameId) {
            document.getElementById('gameIdDisplay').textContent = gameState.gameId.slice(-6).toUpperCase();
        }
    }
    
    function setupRealtimeListeners() {
        if (!gameState.gameId) return;
        
        const gameRef = db.ref(`games/${gameState.gameId}`);
        
        // Teams listener
        gameRef.child('teams').on('value', (snapshot) => {
            teams = snapshot.val() || {};
            updateTeamsDisplay();
            checkStartConditions();
        });
        
        // Players listener
        gameRef.child('players').on('value', (snapshot) => {
            players = snapshot.val() || {};
            updatePlayersDisplay();
            updateStats();
            checkStartConditions();
        });
    }
    
    async function createTeam() {
        const teamName = document.getElementById('teamNameInput').value.trim();
        if (!teamName || gameState.currentPlayer.teamId) return;
        
        const teamId = Date.now().toString();
        const teamColor = teamColors[Object.keys(teams).length % teamColors.length];
        
        const team = {
            id: teamId,
            name: teamName,
            color: teamColor,
            score: 0,
            createdBy: gameState.currentUserId,
            createdAt: firebase.database.ServerValue.TIMESTAMP
        };
        
        try {
            // Create team
            await db.ref(`games/${gameState.gameId}/teams/${teamId}`).set(team);
            
            // Update player
            await db.ref(`games/${gameState.gameId}/players/${gameState.currentUserId}`).update({
                teamId: teamId,
                isLeader: true
            });
            
            document.getElementById('teamNameInput').value = '';
            
            // Send Discord notification
            window.parent.sendDiscordNotification(`ðŸ“‹ **${teamName}** team created by ${gameState.currentPlayer.name}`);
            
        } catch (error) {
            console.error('Error creating team:', error);
        }
    }
    
    function updateTeamsDisplay() {
        const teamsGrid = document.getElementById('teamsGrid');
        const teamsList = Object.values(teams);
        
        teamsGrid.innerHTML = teamsList.map(team => {
            const members = Object.values(players).filter(p => p.teamId === team.id);
            const isMyTeam = gameState.currentPlayer.teamId === team.id;
            const canJoin = !gameState.currentPlayer.teamId && members.length < 5;
            
            return `
                <div class="team-card" style="--team-color: ${team.color}">
                    <div class="team-header">
                        <div class="team-name" style="color: ${team.color}">${team.name}</div>
                        <div class="team-slots">${members.length}/5</div>
                    </div>
                    <div class="team-members">
                        ${members.map((member, idx) => {
                            const isLeader = member.isLeader;
                            const canKick = gameState.isHost || (gameState.currentPlayer.isLeader && isMyTeam && member.id !== gameState.currentUserId);
                            
                            return `
                                <div class="member ${isLeader ? 'leader' : ''}">
                                    ${isLeader ? '<span class="crown">ðŸ‘‘</span>' : ''}
                                    <span class="member-name">${member.name}</span>
                                    ${canKick ? `<button class="kick-btn" onclick="kickPlayer('${member.id}')">âœ•</button>` : ''}
                                </div>
                            `;
                        }).join('')}
                        ${[...Array(5 - members.length)].map(() => 
                            '<div class="member" style="opacity: 0.3; border: 1px dashed rgba(255,255,255,0.2);">Empty Slot</div>'
                        ).join('')}
                    </div>
                    ${canJoin ? `
                        <button class="join-team-btn" onclick="joinTeam('${team.id}')">
                            Join Team
                        </button>
                    ` : ''}
                </div>
            `;
        }).join('');
        
        document.getElementById('totalTeams').textContent = teamsList.length;
    }
    
    function updatePlayersDisplay() {
        const noTeamPlayers = Object.values(players).filter(p => !p.teamId);
        const noTeamList = document.getElementById('noTeamPlayersList');
        
        noTeamList.innerHTML = noTeamPlayers.map(player => {
            const showInvite = gameState.currentPlayer && gameState.currentPlayer.isLeader && 
                             gameState.currentPlayer.teamId && player.id !== gameState.currentUserId;
            
            return `
                <div class="player-item ${!player.teamId ? 'no-team' : ''}">
                    <span class="player-name">${player.name}</span>
                    ${showInvite ? `
                        <button class="invite-btn" onclick="invitePlayer('${player.id}')">
                            Invite
                        </button>
                    ` : ''}
                </div>
            `;
        }).join('') || '<div style="text-align: center; color: #6b7280;">All players have teams!</div>';
    }
    
    function updateStats() {
        document.getElementById('totalPlayers').textContent = Object.keys(players).length;
    }
    
    function checkStartConditions() {
        const hasEnoughTeams = Object.keys(teams).length >= 2;
        const hasEnoughPlayers = Object.keys(players).length >= 2;
        const canStart = hasEnoughTeams && hasEnoughPlayers;
        
        // Show start button for host
        if (gameState.isHost && canStart) {
            document.getElementById('startSection').style.display = 'block';
        } else if (gameState.isHost && Object.keys(players).length >= 1) {
            // Allow solo testing
            document.getElementById('startSection').style.display = 'block';
            document.querySelector('.ready-text').textContent = 'ðŸ§ª Testing Mode - Start with current players';
        }
    }
    
    // Global functions
    window.joinTeam = async function(teamId) {
        if (gameState.currentPlayer.teamId) return;
        
        try {
            await db.ref(`games/${gameState.gameId}/players/${gameState.currentUserId}/teamId`).set(teamId);
            
            const team = teams[teamId];
            window.parent.sendDiscordNotification(`âœ… **${gameState.currentPlayer.name}** joined team ${team.name}`);
        } catch (error) {
            console.error('Error joining team:', error);
        }
    };
    
    window.invitePlayer = async function(playerId) {
        if (!gameState.currentPlayer.isLeader || !gameState.currentPlayer.teamId) return;
        
        try {
            await db.ref(`games/${gameState.gameId}/players/${playerId}/teamId`).set(gameState.currentPlayer.teamId);
        } catch (error) {
            console.error('Error inviting player:', error);
        }
    };
    
    window.kickPlayer = async function(playerId) {
        if (!gameState.isHost && !(gameState.currentPlayer.isLeader && players[playerId].teamId === gameState.currentPlayer.teamId)) return;
        
        try {
            await db.ref(`games/${gameState.gameId}/players/${playerId}/teamId`).remove();
            await db.ref(`games/${gameState.gameId}/players/${playerId}/isLeader`).remove();
        } catch (error) {
            console.error('Error kicking player:', error);
        }
    };
    
    async function startGame() {
        if (!gameState.isHost) return;
        
        try {
            // Auto-assign players without teams
            const noTeamPlayers = Object.values(players).filter(p => !p.teamId);
            const teamsList = Object.values(teams);
            
            for (const player of noTeamPlayers) {
                // Find team with least members
                const availableTeams = teamsList
                    .map(t => ({
                        ...t,
                        memberCount: Object.values(players).filter(p => p.teamId === t.id).length
                    }))
                    .filter(t => t.memberCount < 5)
                    .sort((a, b) => a.memberCount - b.memberCount);
                
                if (availableTeams.length > 0) {
                    await db.ref(`games/${gameState.gameId}/players/${player.id}/teamId`).set(availableTeams[0].id);
                } else {
                    // Create auto team
                    const autoTeamId = Date.now().toString();
                    const autoTeam = {
                        id: autoTeamId,
                        name: `Auto Team ${teamsList.length + 1}`,
                        color: '#6b7280',
                        score: 0,
                        createdAt: firebase.database.ServerValue.TIMESTAMP
                    };
                    await db.ref(`games/${gameState.gameId}/teams/${autoTeamId}`).set(autoTeam);
                    await db.ref(`games/${gameState.gameId}/players/${player.id}/teamId`).set(autoTeamId);
                    await db.ref(`games/${gameState.gameId}/players/${player.id}/isLeader`).set(true);
                }
            }
            
            // Initialize game state
            await db.ref(`games/${gameState.gameId}`).update({
                status: 'playing',
                currentTeamIndex: 0,
                currentQuestion: null,
                turnTimeLeft: 35,
                answeredQuestions: {},
                startedAt: firebase.database.ServerValue.TIMESTAMP
            });
            
            // Send Discord notification
            const embed = {
                title: "ðŸŽ® GAME STARTED!",
                color: 0x22c55e,
                fields: [
                    {
                        name: "Teams",
                        value: Object.values(teams).map(t => t.name).join(' vs '),
                        inline: false
                    },
                    {
                        name: "Players",
                        value: Object.keys(players).length.toString(),
                        inline: true
                    },
                    {
                        name: "Prize Pool",
                        value: "ðŸ’Ž Nitro for winners\nðŸ‘‘ Year Nitro + Sub for MVP",
                        inline: false
                    }
                ],
                timestamp: new Date().toISOString(),
                footer: {
                    text: "Fanum Trivia Championship",
                    icon_url: "https://res.cloudinary.com/dcyvxzhnl/image/upload/v1749096874/image_2025-06-05_001433624_qn0xue.png"
                }
            };
            
            window.parent.sendDiscordNotification('', embed);
            
        } catch (error) {
            console.error('Error starting game:', error);
        }
    }
</script>
